{"version":3,"sources":["index.js"],"names":["Sundial","props","updateDimensions","h","window","innerHeight","w","innerWidth","setState","height","width","trapHeight","Math","sqrt","handleScreenPress","e","x","evt","pageX","touches","y","pageY","pressed","pressedX","pressedY","state","angle","this","calculateAngle","document","title","oncontextmenu","intervalID","setInterval","updateAngle","addEventListener","bind","clearInterval","currentTime","Date","getHours","getMinutes","console","log","rotation","rad","PI","sine","sin","cosine","cos","points","fill","closed","isPressed","className","onTouchStart","onTouchMove","onTouchEnd","handleScreenRelease","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","drawPolygon","React","Component","ReactDOM","render","getElementById"],"mappings":"mOASMA,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAwBVC,iBAAmB,WACf,IAAMC,EAAIC,OAAOC,YACXC,EAAIF,OAAOG,WACjB,EAAKC,SAAS,CACVC,OAAQN,EACRO,MAAOJ,EACPK,WAAYC,KAAKC,KAAKV,EAAIA,EAAIG,EAAIA,MA/BvB,EAgDnBQ,kBAAoB,SAACC,GACjB,IAAMC,EAAID,EAAEE,IAAIC,OAAUH,EAAEE,IAAIE,SAAWJ,EAAEE,IAAIE,QAAQ,GAAGD,OAAU,EAChEE,EAAIL,EAAEE,IAAII,OAAUN,EAAEE,IAAIE,SAAWJ,EAAEE,IAAIE,QAAQ,GAAGE,OAAU,EACtE,EAAKb,SAAS,CACVc,SAAS,EACTC,SAAUP,EACVQ,SAAUJ,KApDd,EAAKK,MAAQ,CAAChB,OAAQ,EAAGC,MAAO,EAAGC,WAAY,EAAGW,SAAS,EAAOC,SAAU,EAAGC,SAAU,EAAGE,MAAO,GAFpF,E,gEAKE,IAAD,OAChBC,KAAKzB,mBACLyB,KAAKnB,SAAS,CACVkB,MAAOC,KAAKC,mBAEhBC,SAASC,MAAQ,UACjBD,SAASE,cAAgB,WACrB,OAAO,GAEXJ,KAAKK,WAAaC,aACd,kBAAM,EAAKC,gBACX,KAEJ9B,OAAO+B,iBAAiB,SAAUR,KAAKzB,iBAAiBkC,KAAKT,S,6CAI7DU,cAAcV,KAAKK,c,uCAcnB,IAAMM,EAAc,IAAIC,KAClBb,EAAwE,KAA/DY,EAAYE,WAAa,GAAKF,EAAYG,aAAe,IAAY,GAAK,IAEzF,OADAC,QAAQC,IAAIjB,GACLA,I,oCAIPC,KAAKnB,SAAS,CACVkB,MAAOC,KAAKC,qB,4CAehBD,KAAKnB,SAAS,CACVc,SAAS,EACTC,SAAU,EACVC,SAAU,M,kCAINoB,GACR,IAAM5B,EAAIW,KAAKF,MAAMF,SACfH,EAAIO,KAAKF,MAAMD,SACfrB,EAAIwB,KAAKF,MAAMd,WACfkC,EAAMD,EAAWhC,KAAKkC,GAAK,IAC3BC,EAAOnC,KAAKoC,IAAIH,GAChBI,EAASrC,KAAKsC,IAAIL,GACxB,OACI,kBAAC,OAAD,CACIM,OAAQ,CACJnC,EAhFI,GAgFkBiC,EAAQ7B,EAhF1B,GAgFgD2B,EACpD/B,EAjFI,GAiFkBiC,EAAQ7B,EAjF1B,GAiFgD2B,EACnD/B,EAAIb,EAAI4C,EAjFL,GAiF+BE,EAAS7B,EAAIjB,EAAI8C,EAjFhD,GAiF4EF,EAC/E/B,EAAIb,EAAI4C,EAlFL,GAkF+BE,EAAS7B,EAAIjB,EAAI8C,EAlFhD,GAkF4EF,GAEpFK,KAAK,QACLC,OAAO,W,+BAMf,IAAMC,EAAY3B,KAAKF,MAAMH,QAC7B,OACI,yBAAKiC,UAAU,eACX,kBAAC,QAAD,CAAO7C,MAAOiB,KAAKF,MAAMf,MAClBD,OAAQkB,KAAKF,MAAMhB,OACnB8C,UAAU,cACVC,aAAc7B,KAAKb,kBAAkBsB,KAAKT,MAC1C8B,YAAaH,GAAa3B,KAAKb,kBAAkBsB,KAAKT,MACtD+B,WAAY/B,KAAKgC,oBAAoBvB,KAAKT,MAC1CiC,YAAajC,KAAKb,kBAAkBsB,KAAKT,MACzCkC,YAAaP,GAAa3B,KAAKb,kBAAkBsB,KAAKT,MACtDmC,UAAWnC,KAAKgC,oBAAoBvB,KAAKT,MACzCoC,aAAcpC,KAAKgC,oBAAoBvB,KAAKT,OAE/C,kBAAC,QAAD,KACKA,KAAKF,MAAMH,SAAWK,KAAKqC,YAAYrC,KAAKF,MAAMC,c,GAxGrDuC,IAAMC,WAgH5BC,IAASC,OAAO,kBAACpE,EAAD,MAAY6B,SAASwC,eAAe,U","file":"static/js/main.da359d0f.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {Layer, Line, Stage} from 'react-konva';\n\nconst TRAP_UPPER_HALF = 30;\nconst TRAP_LOWER_HALF = 70;\n\nclass Sundial extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {height: 0, width: 0, trapHeight: 0, pressed: false, pressedX: 0, pressedY: 0, angle: 0};\n    }\n\n    componentDidMount() {\n        this.updateDimensions();\n        this.setState({\n            angle: this.calculateAngle(),\n        });\n        document.title = 'Sundial';\n        document.oncontextmenu = function () {\n            return false;\n        };\n        this.intervalID = setInterval(\n            () => this.updateAngle(),\n            1000 * 60, // refresh angle every minute\n        );\n        window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalID);\n    }\n\n    updateDimensions = () => {\n        const h = window.innerHeight\n        const w = window.innerWidth\n        this.setState({\n            height: h,\n            width: w,\n            trapHeight: Math.sqrt(h * h + w * w),\n        });\n    }\n\n    calculateAngle() {\n        const currentTime = new Date();\n        const angle = (currentTime.getHours() % 12 + currentTime.getMinutes() / 60) * 360 / 12 + 180\n        console.log(angle);\n        return angle\n    }\n\n    updateAngle() {\n        this.setState({\n            angle: this.calculateAngle(),\n        });\n    }\n\n    handleScreenPress = (e) => {\n        const x = e.evt.pageX || (e.evt.touches && e.evt.touches[0].pageX) || 0;\n        const y = e.evt.pageY || (e.evt.touches && e.evt.touches[0].pageY) || 0;\n        this.setState({\n            pressed: true,\n            pressedX: x,\n            pressedY: y,\n        });\n    };\n\n    handleScreenRelease() {\n        this.setState({\n            pressed: false,\n            pressedX: 0,\n            pressedY: 0,\n        });\n    }\n\n    drawPolygon(rotation) {\n        const x = this.state.pressedX;\n        const y = this.state.pressedY;\n        const h = this.state.trapHeight;\n        const rad = rotation * Math.PI / 180;\n        const sine = Math.sin(rad);\n        const cosine = Math.cos(rad);\n        return (\n            <Line\n                points={[\n                    x - TRAP_UPPER_HALF * cosine, y - TRAP_UPPER_HALF * sine,\n                    x + TRAP_UPPER_HALF * cosine, y + TRAP_UPPER_HALF * sine,\n                    (x - h * sine) + TRAP_LOWER_HALF * cosine, (y + h * cosine) + TRAP_LOWER_HALF * sine,\n                    (x - h * sine) - TRAP_LOWER_HALF * cosine, (y + h * cosine) - TRAP_LOWER_HALF * sine,\n                ]}\n                fill=\"black\"\n                closed=\"true\"\n            />\n        )\n    }\n\n    render() {\n        const isPressed = this.state.pressed;\n        return (\n            <div className=\"fill-window\">\n                <Stage width={this.state.width}\n                       height={this.state.height}\n                       className=\"fill-window\"\n                       onTouchStart={this.handleScreenPress.bind(this)}\n                       onTouchMove={isPressed && this.handleScreenPress.bind(this)}\n                       onTouchEnd={this.handleScreenRelease.bind(this)}\n                       onMouseDown={this.handleScreenPress.bind(this)}\n                       onMouseMove={isPressed && this.handleScreenPress.bind(this)}\n                       onMouseUp={this.handleScreenRelease.bind(this)}\n                       onMouseLeave={this.handleScreenRelease.bind(this)}\n                >\n                    <Layer>\n                        {this.state.pressed && this.drawPolygon(this.state.angle)}\n                    </Layer>\n                </Stage>\n            </div>\n        )\n    }\n}\n\nReactDOM.render(<Sundial/>, document.getElementById('root')\n);\n"],"sourceRoot":""}