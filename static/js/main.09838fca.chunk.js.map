{"version":3,"sources":["index.js"],"names":["Sundial","props","handleScreenPress","e","x","pageX","evt","touches","y","pageY","setState","pressed","pressedX","pressedY","state","height","width","trapHeight","angle","h","window","innerHeight","w","innerWidth","this","Math","sqrt","calculateAngle","document","title","oncontextmenu","intervalID","setInterval","updateAngle","clearInterval","currentTime","Date","getHours","getMinutes","console","log","rotation","rad","PI","sine","sin","cosine","cos","points","fill","closed","className","onTouchStart","bind","onTouchEnd","handleScreenRelease","onTouchMove","onMouseDown","onMouseUp","onMouseLeave","drawPolygon","React","Component","ReactDOM","render","getElementById"],"mappings":"mOASMA,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAwCVC,kBAAoB,SAACC,GACjB,IAAMC,EAAID,EAAEE,OAAUF,EAAEG,IAAIC,SAAWJ,EAAEG,IAAIC,QAAQ,GAAGF,OAAU,EAC5DG,EAAIL,EAAEM,OAAUN,EAAEG,IAAIC,SAAWJ,EAAEG,IAAIC,QAAQ,GAAGE,OAAU,EAClE,EAAKC,SAAS,CACVC,SAAS,EACTC,SAAUR,EACVS,SAAUL,KA7Cd,EAAKM,MAAQ,CAACC,OAAQ,EAAGC,MAAO,EAAGC,WAAY,EAAGN,SAAS,EAAOC,SAAU,EAAGC,SAAU,EAAGK,MAAO,GAFpF,E,gEAKE,IAAD,OACVC,EAAIC,OAAOC,YACXC,EAAIF,OAAOG,WACjBC,KAAKd,SAAS,CACVK,OAAQI,EACRH,MAAOM,EACPL,WAAYQ,KAAKC,KAAKP,EAAIA,EAAIG,EAAIA,GAClCJ,MAAOM,KAAKG,mBAEhBC,SAASC,MAAQ,UACjBD,SAASE,cAAgB,WACrB,OAAO,GAEXN,KAAKO,WAAaC,aACd,kBAAM,EAAKC,gBACX,O,6CAKJC,cAAcV,KAAKO,c,uCAInB,IAAMI,EAAc,IAAIC,KAClBlB,EAAwE,KAA/DiB,EAAYE,WAAa,GAAKF,EAAYG,aAAe,IAAY,GAAK,IAEzF,OADAC,QAAQC,IAAItB,GACLA,I,oCAIPM,KAAKd,SAAS,CACVQ,MAAOM,KAAKG,qB,4CAehBH,KAAKd,SAAS,CACVC,SAAS,EACTC,SAAU,EACVC,SAAU,M,kCAIN4B,GACR,IAAMrC,EAAIoB,KAAKV,MAAMF,SACfJ,EAAIgB,KAAKV,MAAMD,SACfM,EAAIK,KAAKV,MAAMG,WACfyB,EAAMD,EAAWhB,KAAKkB,GAAK,IAC3BC,EAAOnB,KAAKoB,IAAIH,GAChBI,EAASrB,KAAKsB,IAAIL,GACxB,OACI,kBAAC,OAAD,CACIM,OAAQ,CACJ5C,EAzEI,GAyEkB0C,EAAQtC,EAzE1B,GAyEgDoC,EACpDxC,EA1EI,GA0EkB0C,EAAQtC,EA1E1B,GA0EgDoC,EACnDxC,EAAIe,EAAIyB,EA1EL,GA0E+BE,EAAStC,EAAIW,EAAI2B,EA1EhD,GA0E4EF,EAC/ExC,EAAIe,EAAIyB,EA3EL,GA2E+BE,EAAStC,EAAIW,EAAI2B,EA3EhD,GA2E4EF,GAEpFK,KAAK,QACLC,OAAO,W,+BAMf,OACI,yBAAKC,UAAU,eACX,kBAAC,QAAD,CAAOnC,MAAOQ,KAAKV,MAAME,MAClBD,OAAQS,KAAKV,MAAMC,OACnBoC,UAAU,cACVC,aAAc5B,KAAKtB,kBAAkBmD,KAAK7B,MAC1C8B,WAAY9B,KAAK+B,oBAAoBF,KAAK7B,MAC1CgC,YAAahC,KAAKtB,kBAAkBmD,KAAK7B,MACzCiC,YAAajC,KAAKtB,kBAAkBmD,KAAK7B,MACzCkC,UAAWlC,KAAK+B,oBAAoBF,KAAK7B,MACzCmC,aAAcnC,KAAK+B,oBAAoBF,KAAK7B,OAE/C,kBAAC,QAAD,KACKA,KAAKV,MAAMH,SAAWa,KAAKoC,YAAYpC,KAAKV,MAAMI,c,GA/FrD2C,IAAMC,WAuG5BC,IAASC,OAAO,kBAAChE,EAAD,MAAY4B,SAASqC,eAAe,U","file":"static/js/main.09838fca.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {Layer, Line, Stage} from 'react-konva';\n\nconst TRAP_UPPER_HALF = 20;\nconst TRAP_LOWER_HALF = 70;\n\nclass Sundial extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {height: 0, width: 0, trapHeight: 0, pressed: false, pressedX: 0, pressedY: 0, angle: 0};\n    }\n\n    componentDidMount() {\n        const h = window.innerHeight\n        const w = window.innerWidth\n        this.setState({\n            height: h,\n            width: w,\n            trapHeight: Math.sqrt(h * h + w * w),\n            angle: this.calculateAngle(),\n        });\n        document.title = 'Sundial';\n        document.oncontextmenu = function () {\n            return false;\n        }\n        this.intervalID = setInterval(\n            () => this.updateAngle(),\n            1000 * 60, // refresh angle every minute\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalID);\n    }\n\n    calculateAngle() {\n        const currentTime = new Date();\n        const angle = (currentTime.getHours() % 12 + currentTime.getMinutes() / 60) * 360 / 12 + 180\n        console.log(angle);\n        return angle\n    }\n\n    updateAngle() {\n        this.setState({\n            angle: this.calculateAngle(),\n        });\n    }\n\n    handleScreenPress = (e) => {\n        const x = e.pageX || (e.evt.touches && e.evt.touches[0].pageX) || 0;\n        const y = e.pageY || (e.evt.touches && e.evt.touches[0].pageY) || 0;\n        this.setState({\n            pressed: true,\n            pressedX: x,\n            pressedY: y,\n        });\n    };\n\n    handleScreenRelease() {\n        this.setState({\n            pressed: false,\n            pressedX: 0,\n            pressedY: 0,\n        });\n    }\n\n    drawPolygon(rotation) {\n        const x = this.state.pressedX;\n        const y = this.state.pressedY;\n        const h = this.state.trapHeight;\n        const rad = rotation * Math.PI / 180;\n        const sine = Math.sin(rad);\n        const cosine = Math.cos(rad);\n        return (\n            <Line\n                points={[\n                    x - TRAP_UPPER_HALF * cosine, y - TRAP_UPPER_HALF * sine,\n                    x + TRAP_UPPER_HALF * cosine, y + TRAP_UPPER_HALF * sine,\n                    (x - h * sine) + TRAP_LOWER_HALF * cosine, (y + h * cosine) + TRAP_LOWER_HALF * sine,\n                    (x - h * sine) - TRAP_LOWER_HALF * cosine, (y + h * cosine) - TRAP_LOWER_HALF * sine,\n                ]}\n                fill=\"black\"\n                closed=\"true\"\n            />\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"fill-window\">\n                <Stage width={this.state.width}\n                       height={this.state.height}\n                       className=\"fill-window\"\n                       onTouchStart={this.handleScreenPress.bind(this)}\n                       onTouchEnd={this.handleScreenRelease.bind(this)}\n                       onTouchMove={this.handleScreenPress.bind(this)}\n                       onMouseDown={this.handleScreenPress.bind(this)}\n                       onMouseUp={this.handleScreenRelease.bind(this)}\n                       onMouseLeave={this.handleScreenRelease.bind(this)}\n                >\n                    <Layer>\n                        {this.state.pressed && this.drawPolygon(this.state.angle)}\n                    </Layer>\n                </Stage>\n            </div>\n        )\n    }\n}\n\nReactDOM.render(<Sundial/>, document.getElementById('root')\n);\n"],"sourceRoot":""}